#!/usr/bin/php
<?php

use Facebook\WebDriver\Chrome\ChromeOptions;
use Facebook\WebDriver\Exception\NoSuchElementException;
use Facebook\WebDriver\Remote\DesiredCapabilities;
use Facebook\WebDriver\Remote\RemoteWebDriver;
use Facebook\WebDriver\WebDriverBy;
use Facebook\WebDriver\WebDriverExpectedCondition;
use Facebook\WebDriver\WebDriverKeys;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

require_once(__DIR__ . '/vendor/autoload.php');

class PresearchBot extends Command
{
    /** @var  RemoteWebDriver */
    private $driver;

    /** @var  array */
    private $credentials;

    /** @var  array */
    private $phrases = ['makg.eu', 'jquery meme generator', 'bitcoin'];

    /** @var int */
    private $limit = [32, 40];

    /** @var array */
    private $delay = [300, 600];

    /** @var array */
    private $usedPhrases = [];

    public function __construct()
    {
        parent::__construct();

        set_error_handler(function($errno, $errstr, $errfile, $errline, array $errcontext) {
            if (0 === error_reporting()) {
                return false;
            }

            throw new \Exception($errstr, 0);
        }, E_WARNING);
    }

    public function configure()
    {
        $this
            ->setName('run')
            ->setDescription("Presearch Bot (https://github.com/MakG10/presearch-bot)")
            ->addArgument('email', InputArgument::REQUIRED, 'E-mail to sign in with')
            ->addArgument('password', InputArgument::REQUIRED, 'Password to sign in with')
            ->addOption('limit', 'num', InputOption::VALUE_OPTIONAL, 'How many searches to perform. Can be a specific number or a range, i.e. 32, 10-15. Default: 32-40')
            ->addOption('delay', 'd', InputOption::VALUE_OPTIONAL, 'Delay in seconds between searches. Could be a specific number or a range, i.e. 300, 250-400. Default: 300-600')
            ->addOption('webdriver-url', 'url', InputOption::VALUE_REQUIRED, 'WebDriver URL', 'http://localhost:9515/wd/hub')
            ->addOption('headless', 'hl', InputOption::VALUE_NONE, 'Run Chrome in headless mode')
            ->addOption('phrases', 'p', InputOption::VALUE_REQUIRED, 'File with phrases to choose from. Each phrase should be in a separate line')
            ->addOption('force', 'f', InputOption::VALUE_NONE, 'Force start ignoring all warnings')
        ;
    }

    public function execute(InputInterface $input, OutputInterface $output)
    {
        if ($input->getOption('limit')) {
            $this->limit = explode('-', $input->getOption('limit'));
            if (count($this->limit) === 1) array_push($this->limit, $this->limit[0]);

            if (!ctype_digit($this->limit[0]) && !ctype_digit($this->limit[1])) {
                $output->writeln('Incorrect option: limit');
                return 1;
            }
        }

        if ($input->getOption('delay')) {
            $this->delay = explode('-', $input->getOption('delay'));
            if (count($this->delay) === 1) array_push($this->delay, $this->delay[0]);

            if (!ctype_digit($this->delay[0]) || !ctype_digit($this->delay[1])) {
                $output->writeln('Incorrect option: limit');
                return 1;
            }
        }


        $phrasesFilename = $input->getOption('phrases') ?: __DIR__ . '/phrases.txt';
        $phrases = $this->loadPhrases($phrasesFilename);

        if (empty($phrases) && !$input->getOption('force')) {
            $output->writeln(sprintf('Failed to load phrases from file "%s". If you want to run bot with only 3 predefined phrases, use --force option.', $phrasesFilename));

            return 2;
        }

        if (!empty($phrases)) $this->setPhrases($phrases);


        $driverOptions = new ChromeOptions();
        if ($input->getOption('headless')) $driverOptions->addArguments(['--headless']);

        $driverCapabilities = DesiredCapabilities::chrome();
        $driverCapabilities->setCapability(ChromeOptions::CAPABILITY, $driverOptions);

        $this->driver = RemoteWebDriver::create($input->getOption('webdriver-url'), $driverCapabilities);
        $this->credentials = [
            'email' => $input->getArgument('email'),
            'password' => $input->getArgument('password'),
        ];

        $this->driver->get('https://presearch.org/');

        $this->login();

        $phrasesCount = 0;
        $limit = rand($this->limit[0], $this->limit[1]);

        if ($this->getBalance() === 'unknown') {
            $output->writeln('Unable to sign in.');
            return 2;
        }

        $output->writeln(sprintf('Successfuly logged in, planning to do %s loops... Current balance is %s', $limit, $this->getBalance()));

        sleep(2);

        while ($phrasesCount < $limit && count($this->phrases) > 0) {
            $this->driver->get('https://presearch.org');
            sleep(2);

            $searchElement = $this->driver->findElement(WebDriverBy::id('search'));
            $searchElement->sendKeys($this->getRandomPhrase());
            $this->driver->getKeyboard()->pressKey(WebDriverKeys::ENTER);

            sleep(rand($this->delay[0], $this->delay[1]));

            $phrasesCount++;
        }

        $this->driver->get('https://presearch.org');

        $output->writeln(sprintf('Finishing up, current balance is %s', $this->getBalance()));
    }

    private function login()
    {
        $this->driver->get('https://presearch.org/login');
        $this->driver->wait()->until(
            WebDriverExpectedCondition::visibilityOf(
                $this->driver->findElement(WebDriverBy::cssSelector('.login-box'))
            )
        );

        $this->driver->findElement(WebDriverBy::id('email'))->sendKeys($this->credentials['email']);
        $this->driver->findElement(WebDriverBy::id('password'))->sendKeys($this->credentials['password']);
        $this->driver->findElement(WebDriverBy::cssSelector('.login-box button[type="submit"]'))->click();
    }

    /**
     * @return string
     */
    private function getBalance()
    {
        try {
            $this->driver->wait(10)->until(
                WebDriverExpectedCondition::presenceOfElementLocated(
                    WebDriverBy::cssSelector('.balance')
                )
            );

            $balance = $this->driver->findElement(WebDriverBy::cssSelector('.balance'))->getText();

            return $balance . ' PRE';
        } catch (NoSuchElementException $e) {
            return 'unknown';
        }
    }

    private function loadPhrases($filename)
    {
        try {
            $phrases = file($filename);

            foreach ($phrases as $key => $phrase) {
                if (strlen($phrase) <= 1 || $phrase[0] === '#' || substr($phrase, 0, 2) === '//')
                    unset($phrases[$key]);
            }

            return $phrases;
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * @return array
     */
    private function getPhrases(): array
    {
        return $this->phrases;
    }

    /**
     * @param array $phrases
     */
    private function setPhrases(array $phrases)
    {
        $this->phrases = $phrases;
    }

    /**
     * @return string
     */
    private function getRandomPhrase()
    {
        $random = array_rand($this->phrases);
        $phrase = $this->phrases[$random];

        unset($this->phrases[$random]);

        return $phrase;
    }
}

$app = new Application('presearch-bot');
$app->addCommands([new PresearchBot()]);
$app->run();
